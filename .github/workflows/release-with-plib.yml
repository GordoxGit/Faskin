name: release-with-plib

on:
  workflow_dispatch:
    inputs:
      protocollib_source:
        description: 'github-packages | s3 | manual-upload'
        required: true
        type: choice
        options:
          - github-packages
          - s3
          - manual-upload
      protocollib_ref:
        description: 'tag, S3 key or URL'
        required: false
      version:
        description: 'override version'
        required: false
      release_notes:
        description: 'additional release notes'
        required: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'
      - name: Set up Gradle
        uses: gradle/gradle-build-action@v3
        with:
          gradle-version: '8.14.3'
      - name: Determine version
        run: |
          if [ -n "${{ github.event.inputs.version }}" ]; then
            echo "RELEASE_VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV
          else
            echo "RELEASE_VERSION=$(grep '^version=' gradle.properties | cut -d= -f2)" >> $GITHUB_ENV
          fi
      - name: Download ProtocolLib (GitHub Packages)
        if: ${{ github.event.inputs.protocollib_source == 'github-packages' }}
        env:
          GH_PACKAGES_TOKEN: ${{ secrets.GH_PACKAGES_TOKEN }}
        run: |
          test -n "$GH_PACKAGES_TOKEN" || { echo 'GH_PACKAGES_TOKEN missing'; exit 1; }
          mkdir -p libs
          curl -L -H "Authorization: token $GH_PACKAGES_TOKEN" "${{ github.event.inputs.protocollib_ref }}" -o libs/ProtocolLib.jar
      - name: Download ProtocolLib (S3)
        if: ${{ github.event.inputs.protocollib_source == 's3' }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          S3_BUCKET: ${{ secrets.S3_BUCKET }}
        run: |
          test -n "$S3_BUCKET" || { echo 'S3_BUCKET missing'; exit 1; }
          mkdir -p libs
          aws s3 cp "s3://$S3_BUCKET/${{ github.event.inputs.protocollib_ref }}" libs/ProtocolLib.jar
      - name: Download ProtocolLib (manual upload)
        if: ${{ github.event.inputs.protocollib_source == 'manual-upload' }}
        env:
          PROTOCOLLIB_UPLOAD_URL: ${{ secrets.PROTOCOLLIB_UPLOAD_URL }}
        run: |
          URL="${{ github.event.inputs.protocollib_ref }}"
          if [ -z "$URL" ]; then
            URL="$PROTOCOLLIB_UPLOAD_URL"
          fi
          test -n "$URL" || { echo 'No ProtocolLib URL provided'; exit 1; }
          mkdir -p libs
          curl -L "$URL" -o libs/ProtocolLib.jar
      - name: Verify ProtocolLib jar
        run: |
          test -f libs/ProtocolLib.jar || { echo 'ProtocolLib jar missing'; exit 1; }
      - name: Build with ProtocolLib
        run: ./gradlew -PwithPlib=true -PwithPlibLocal=./libs/ProtocolLib.jar clean shadowJar test
      - name: Package checksum
        run: sha256sum build/libs/HeneriaCore-withPlib-${{ env.RELEASE_VERSION }}.jar > build/libs/HeneriaCore-withPlib-${{ env.RELEASE_VERSION }}.jar.sha256
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.RELEASE_VERSION }}
          release_name: v${{ env.RELEASE_VERSION }}
          draft: true
          body: ${{ github.event.inputs.release_notes }}
      - name: Upload artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: build/libs/HeneriaCore-withPlib-${{ env.RELEASE_VERSION }}.jar
          asset_name: HeneriaCore-withPlib-${{ env.RELEASE_VERSION }}.jar
          asset_content_type: application/java-archive
      - name: Upload checksum
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: build/libs/HeneriaCore-withPlib-${{ env.RELEASE_VERSION }}.jar.sha256
          asset_name: HeneriaCore-withPlib-${{ env.RELEASE_VERSION }}.jar.sha256
          asset_content_type: text/plain
